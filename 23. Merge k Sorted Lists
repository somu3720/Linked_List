/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists==null||lists.length == 0) return null;
        
      PriorityQueue<ListNode> pq = new PriorityQueue<ListNode>(lists.length, new Comparator<ListNode>(){
            
                    @Override
                    
                    public int compare(ListNode o1, ListNode o2)
                    {
                        if(o1.val < o2.val)
                            return -1;
                        
                        else if(o1.val == o2.val)
                            return 0;
                        
                        else
                            return 1;
                    }
      });
        
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;
        
        for(ListNode node : lists)
            if(node != null)
                pq.add(node);
        
        while(!pq.isEmpty()){
            
            curr.next = pq.poll();
            curr = curr.next;
            
            if (curr.next!=null)
                pq.add(curr.next);
        }
                                          
        return dummy.next;
    }
    
    
}

//https://www.youtube.com/watch?v=E5WSILx1q0Q
