/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        if(head == null || head.next == null)
            return;
        
        //head of first half
        ListNode L1= head;
        
        //head of 2nd half
        ListNode slow = head;
        
        //tail of 2nd half
        ListNode fast = head;
        
        //tail of 1st half
        ListNode prev = null;
        
        while(fast != null && fast.next != null)
        {
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        
        prev.next = null;
        
        ListNode L2 = reverse(slow);
        
        merge(L1, L2);
         
    }
    
    public ListNode reverse(ListNode head)
    {
        ListNode prev = null;
        ListNode curr = head;
        
        while(curr != null)
        {
            ListNode next = curr.next;
            curr.next = prev;
            
            prev = curr;
            curr = next;
        }
        
        return prev;
    }
    
    public void merge(ListNode l1, ListNode l2)
    {
        while(l1 != null)
        {
            ListNode l1_next = l1.next;
            ListNode l2_next = l2.next;
            
            l1.next = l2;
            
            if(l1_next == null)
            {
                break;
            }
            
            l2.next = l1_next;
            
            l1 = l1_next;
            l2 = l2_next;
            
        }
    }
}


//Middle of the Linked List.

//Reverse Linked List.

//Merge Two Sorted Lists.
//https://www.youtube.com/watch?v=xRYPjDMSUFw&t=9s
