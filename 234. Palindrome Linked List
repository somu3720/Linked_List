class Solution {
    public boolean isPalindrome(ListNode head) {
        
        List<Integer> vals = new ArrayList<>();
        
        //convert LL to arraylist
        
        ListNode curr = head;
        while(curr != null)
        {
            vals.add(curr.val);
            curr = curr.next;
        }
        
       
        // reverse vals arraylist
        List<Integer> reversedVals = new ArrayList<>();
        
        for(int i = vals.size() - 1; i >= 0; i--)
            reversedVals.add(vals.get(i));
        
        for(int i = 0; i < vals.size(); i++)
             if(vals.get(i) != reversedVals.get(i))
                 return false;
        
        return true;
    }
}

........................................................................


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
       if(head == null)
           return true;
        
       ListNode firstHalfEnd = endOfFirstHalf(head);
       ListNode secondHalfStart = reverseList(firstHalfEnd.next);
        
       ListNode p1 = head; 
       ListNode p2 = secondHalfStart;
       boolean result = true;
    
        while(result && p2 != null)
        {
            if(p1.val != p2.val) return false;
            p1 = p1.next;
            p2 = p2.next;
        }
        
        firstHalfEnd.next = reverseList(secondHalfStart);
        
        return result;
    }
    
    private ListNode reverseList(ListNode head)
    {
        ListNode prev = null;
        ListNode curr = head;
        
        
        while(curr != null)
        {
            ListNode next = curr.next;;
            curr.next = prev;
            
            prev = curr;
            curr = next;
        }
        
        return prev;
    }
    
    private ListNode endOfFirstHalf(ListNode head)
    {
        ListNode slow = head;
        ListNode fast = head;
        
        while(fast.next != null && fast.next.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        
        return slow;
    }
}
