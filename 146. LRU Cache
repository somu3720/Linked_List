class LRUCache {
    
    Node head = new Node(0,0);
    Node tail = new Node(0,0);
    
    Map<Integer,Node> map = new HashMap<>();
    
    int capacity;
    
    class Node {
    int key;
    int value;
    Node prev;
    Node next;
        
    Node(int key,int value) 
    {
        this.key = key;
        this.value = value;
    }
  }
    
    

    public LRUCache(int capacity) {
        this.capacity = capacity;
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) 
    {
        if(map.containsKey(key))
        {
            Node data =  map.get(key);
           
            //move data to tha top
            // remove the node;
            remove(data);
            // insert it
            insert(data);
            
            return data.value;
            
        }
        
        return -1;
    }
    
    public void put(int key, int value) 
    {
        // if value is present we move it to top;
        if(map.containsKey(key))
        {
            remove(map.get(key));
        }
        
        // if cache is full
        if(capacity == map.size())
        {
            remove(tail.prev);
        }
        // tail.prev ==> Least recently used
        insert(new Node(key,value));
    }
    
    void remove(Node node)
    {
        map.remove(node.key);
        
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
    
    void insert(Node node)
    {
        map.put(node.key, node);
        Node headNext = head.next;
        
        head.next = node;
        node.prev = head;
        headNext.prev = node;
        node.next = headNext;
            
        
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */

//https://www.youtube.com/watch?v=xpSfcHDTPZQ
